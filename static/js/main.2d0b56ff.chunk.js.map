{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","placeholder","backgorundColor","cursor","value","onChange","event","console","log","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","reverse","join","navigator","clipboard","writeText","filter","a1","defaultProps","aboutText","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2d0b56ff.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link \" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n              </li> */}\r\n              \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n            </form> */}\r\n\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode}id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string,\r\n    aboutText:PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps={\r\n    title:'Set title here',\r\n    aboutText:'About text here'\r\n};","import React,{useState} from \"react\";\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n  \r\n\r\n  const changeToUpper=()=>{\r\n    console.log(\"Uppercase was clicked\");\r\n    let newText=text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\",\"success\")\r\n  }\r\n\r\n  const changeToLower=()=>{\r\n    console.log(\"Lower case was clicked\");\r\n    let newText=text.toLowerCase()\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\",\"success\")\r\n  }\r\n\r\n  const clearText=()=>{\r\n    console.log(\"Clear text was clicked\");\r\n    let newText=\"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared successfully\",\"success\")\r\n  }\r\n\r\n  const reverseTheText=()=>{\r\n    let newText=text.split(\"\").reverse().join(\"\");\r\n    setText(newText);\r\n    props.showAlert(\"Text reversed successfully\",\"success\")\r\n  }\r\n\r\n  const handleCopy=()=>{\r\n    \r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Text copied to clipboard successfully\",\"success\")\r\n  }\r\n\r\n  const handleOnChange=(event)=>{\r\n    console.log(\"On change was clicked\");\r\n    setText(event.target.value)\r\n    \r\n  }\r\n\r\n  const removeSpaces=()=>{\r\n    let newText=text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Removed spaces  successfully\",\"success\")\r\n  }\r\n  \r\n  const[text,setText]=useState('');\r\n  return (\r\n    <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n      <h2 className=\"my-2 mb-4\">{props.heading}</h2>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" placeholder=\"Type or paste your content here\" style={{backgorundColor:props.mode==='dark'?'grey':'light'}}cursor=\"text\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"5\"></textarea>\r\n      </div>\r\n      <div className=\"container my-5 \" >\r\n        \r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={changeToUpper}>Convert To Upper Case</button>\r\n      <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={changeToLower}>Convert To Lower Case</button>\r\n      <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={reverseTheText}>Reverse the text</button>\r\n      <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>Copy text</button>\r\n      <button disabled={text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={removeSpaces}>Remove Extra Spaces</button>\r\n      <button disabled={text.length===0} className=\"btn btn-danger mx-2 my-1\" onClick={clearText}>Clear</button>\r\n      </div>\r\n\r\n      <div className=\"container my-5\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your text Summary</h2>\r\n        <p>{text.split(/\\s+/).filter((a1)=>{return a1.length!==0}).length} words and {text.length} characters</p>\r\n        <p>{0.008*text.split(\" \").length} Minutes to read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n      </div>\r\n\r\n      <div className=\"card text-dark bg-light mb-3\" >\r\n  <div className=\"card-header\">Created By Pushkar Waykole</div>\r\n  <div className=\"card-body\">\r\n    <h5 className=\"card-title\">About Me</h5>\r\n    <p className=\"card-text\">This is a  project created by me.TextUtiles is a word counting and a character counting utility which can be used to manupulate your text in the way you want. </p>\r\n  </div>\r\n</div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize=(word)=>{\r\n        let lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n        {props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import Navbar from './components/Navbar'\nimport TextForm from './components/TextForm'\nimport './App.css';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);;\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been Enabled\", \"success\")\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been Enabled\", \"success\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n\n        <Navbar title='TextUtiles' aboutText='About Me' mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* <Route exact path=\"/about\">\n              <About mode={mode}/>\n            </Route> */}\n\n            {/* <Route exact path=\"/\"> */}\n              <TextForm heading=\"Try TextUtiles - Word counter,Character counter,Remove extra spaces\" showAlert={showAlert} mode={mode} />\n            {/* </Route> */}\n          {/* </Switch> */}\n          \n\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}